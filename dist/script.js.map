{"version":3,"sources":["script.js"],"names":["light","document","getElementById","dark","teal","body","querySelector","igot","input","ul","setDarkMode","className","checked","setLightMode","tealMode","setColorMode","savedMode","localStorage","getItem","window","matchMedia","matches","createTaskItem","taskObj","li","createElement","completed","classList","add","taskText","textContent","text","appendChild","div","radio1","type","name","Date","now","radio2","span1","innerHTML","span2","addEventListener","toggle","updateTaskInStorage","removeChild","removeTaskFromStorage","loadTasks","JSON","parse","forEach","task","saveTask","saved","newTask","push","setItem","stringify","textObj","map","filter","updateDateTime","date","toLocaleDateString","time","toLocaleTimeString","concat","value","trim","setInterval"],"mappings":"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","file":"script.js","sourcesContent":["let light = document.getElementById(\"light\")\r\nlet dark = document.getElementById(\"dark\")\r\nlet teal = document.getElementById(\"teal\")\r\nlet body = document.querySelector(\"body\")\r\nlet igot = document.querySelector(\".igot\")\r\nlet input = document.querySelector(\".text\")\r\nlet ul = document.querySelector(\".ul-el\")\r\n\r\n// Set the dark mode theme\r\nconst setDarkMode = () => {\r\n    body.className = \"dark\"\r\n    dark.checked = true\r\n}\r\n\r\n// Set the light mode theme\r\nconst setLightMode = () => {\r\n    body.className = \"light\"\r\n    light.checked = true\r\n}\r\n\r\n// Set the teal mode theme\r\nconst tealMode = () => {\r\n    body.className = \"teal\"\r\n    teal.checked = true\r\n}\r\n\r\n// Load the saved color mode or default to system preference\r\nconst setColorMode = () => {\r\n    const savedMode = localStorage.getItem('colorMode')\r\n    if (savedMode === \"dark\") {\r\n        return setDarkMode()\r\n    } else if (savedMode === \"light\") {\r\n        return setLightMode()\r\n    } else if (savedMode === \"teal\") {\r\n        return tealMode()\r\n    } else {\r\n        if (window.matchMedia('(prefers-color-scheme:light)').matches) {\r\n            return setLightMode()\r\n        } else {\r\n            return setDarkMode()\r\n        }\r\n    }\r\n}\r\n\r\nsetColorMode()\r\n\r\nlight.addEventListener(\"click\", function () {\r\n    localStorage.setItem('colorMode', 'light')\r\n    setLightMode()\r\n})\r\n\r\ndark.addEventListener(\"click\", function () {\r\n    localStorage.setItem('colorMode', 'dark')\r\n    setDarkMode()\r\n})\r\n\r\nteal.addEventListener(\"click\", function () {\r\n    localStorage.setItem('colorMode', 'teal')\r\n    tealMode()\r\n})\r\n\r\n// Create task item with support for checked state\r\nfunction createTaskItem(taskObj) {\r\n    let li = document.createElement(\"li\")\r\n    li.className = \"task\"\r\n\r\n    if (taskObj.completed) {\r\n        li.classList.add(\"strike\")\r\n    }\r\n\r\n    let taskText = document.createElement(\"span\")\r\n    taskText.className = \"task-text\"\r\n    taskText.textContent = taskObj.text\r\n    li.appendChild(taskText)\r\n\r\n    let div = document.createElement(\"div\")\r\n    div.className = \"buttons\"\r\n\r\n    let radio1 = document.createElement(\"input\")\r\n    radio1.type = \"radio\"\r\n    radio1.className = \"tick\"\r\n    radio1.name = \"tick-\" + Date.now()\r\n    radio1.checked = taskObj.completed\r\n\r\n    let radio2 = document.createElement(\"input\")\r\n    radio2.type = \"radio\"\r\n    radio2.className = \"delete\"\r\n\r\n    let span1 = document.createElement(\"span\")\r\n    span1.className = \"right\"\r\n    span1.innerHTML = \"&#10004;\"\r\n\r\n    let span2 = document.createElement(\"span\")\r\n    span2.className = \"left\"\r\n    span2.innerHTML = \"&#x1F5D1;\"\r\n\r\n    div.appendChild(radio1)\r\n    div.appendChild(radio2)\r\n    div.appendChild(span1)\r\n    div.appendChild(span2)\r\n    li.appendChild(div)\r\n    ul.appendChild(li)\r\n\r\n    radio1.addEventListener(\"click\", function () {\r\n        li.classList.toggle(\"strike\")\r\n        taskObj.completed = !taskObj.completed\r\n        updateTaskInStorage(taskObj)\r\n    })\r\n\r\n    radio2.addEventListener(\"click\", function () {\r\n        ul.removeChild(li)\r\n        removeTaskFromStorage(taskObj.text)\r\n    })\r\n}\r\n\r\n// Load tasks from localStorage and render them\r\nfunction loadTasks() {\r\n    let saved = JSON.parse(localStorage.getItem(\"tasks\")) || []\r\n    saved.forEach(task => {\r\n        createTaskItem(task)\r\n    })\r\n}\r\n\r\n// Save a new task\r\nfunction saveTask(text) {\r\n    let saved = JSON.parse(localStorage.getItem(\"tasks\")) || []\r\n    let newTask = { text: text, completed: false }\r\n    saved.push(newTask)\r\n    localStorage.setItem(\"tasks\", JSON.stringify(saved))\r\n}\r\n\r\n// Update the completion status of a task\r\nfunction updateTaskInStorage(textObj) {\r\n    let saved = JSON.parse(localStorage.getItem(\"tasks\")) || []\r\n    saved = saved.map(task => {\r\n        if (task.text === textObj.text) {\r\n            return textObj\r\n        }\r\n        return task\r\n    })\r\n    localStorage.setItem(\"tasks\", JSON.stringify(saved))\r\n}\r\n\r\n// Remove task by text\r\nfunction removeTaskFromStorage(text) {\r\n    let saved = JSON.parse(localStorage.getItem(\"tasks\")) || []\r\n    saved = saved.filter(task => task.text !== text)\r\n    localStorage.setItem(\"tasks\", JSON.stringify(saved))\r\n}\r\n\r\n// Handle adding a new task\r\nigot.addEventListener(\"click\", function () {\r\n    let value = input.value.trim()\r\n    if (value !== \"\") {\r\n        let taskObj = { text: value, completed: false }\r\n        createTaskItem(taskObj)\r\n        saveTask(value)\r\n        input.value = \"\"\r\n    }\r\n})\r\n\r\n// Load tasks on startup\r\nloadTasks()\r\n\r\n// Update and display date/time every second\r\nfunction updateDateTime() {\r\n    const now = new Date()\r\n    const date = now.toLocaleDateString()\r\n    const time = now.toLocaleTimeString()\r\n    document.getElementById(\"datetime\").textContent = `${date} ${time}`\r\n}\r\n\r\nupdateDateTime()\r\nsetInterval(updateDateTime, 1000)\r\n"]}